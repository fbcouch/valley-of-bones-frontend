// Generated by CoffeeScript 1.6.3
(function() {
  var createChart;

  $.ajax("http://secure-caverns-9874.herokuapp.com/game").done(function(data) {
    var cmd, game, games, games_per_version, i, key, marines_per_version, udata, unit, unit_data, unit_data_per_game, units_per_game, win_pct_first_player, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _name, _name1, _name2, _name3, _o, _p, _ref, _ref1;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      game = data[_i];
      if (!isNaN(parseFloat(game.version)) && isFinite(game.version)) {
        game.version = "0.0." + game.version;
      }
      game.game = JSON.parse(game.game.replace(',]', ']'));
    }
    data = data.map(function(game) {
      if (game.game.history.length >= 10) {
        return game;
      } else {
        return null;
      }
    });
    data = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        game = data[_j];
        if (game != null) {
          _results.push(game);
        }
      }
      return _results;
    })();
    games_per_version = {};
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      game = data[_j];
      games_per_version[_name = game.version] || (games_per_version[_name] = 0);
      games_per_version[game.version]++;
    }
    createChart(games_per_version, '#gamesPerVersion');
    marines_per_version = {};
    for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
      game = data[_k];
      marines_per_version[_name1 = game.version] || (marines_per_version[_name1] = 0);
      _ref = game.game.history;
      for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
        cmd = _ref[_l];
        if (cmd.type === "Build" && cmd.building === "marine-base") {
          marines_per_version[game.version]++;
        }
      }
    }
    for (key in games_per_version) {
      marines_per_version[key] /= games_per_version[key];
    }
    createChart(marines_per_version, '#marinesPerVersion', 2);
    win_pct_first_player = {};
    for (_m = 0, _len4 = data.length; _m < _len4; _m++) {
      game = data[_m];
      win_pct_first_player[_name2 = game.version] || (win_pct_first_player[_name2] = 0);
      i = 0;
      while (game.game.history[i].owner === -1 && i < game.game.history.length) {
        i++;
      }
      if (game.game.history[i].owner === game.game.result) {
        win_pct_first_player[game.version]++;
      }
    }
    for (key in games_per_version) {
      win_pct_first_player[key] = win_pct_first_player[key] / games_per_version[key] * 100;
    }
    createChart(win_pct_first_player, '#winPctFirstPerVersion', 1);
    unit_data = {};
    for (_n = 0, _len5 = data.length; _n < _len5; _n++) {
      game = data[_n];
      _ref1 = game.game.history;
      for (_o = 0, _len6 = _ref1.length; _o < _len6; _o++) {
        cmd = _ref1[_o];
        if (!(cmd.type === "Build" && game.version === "0.0.17")) {
          continue;
        }
        unit_data[_name3 = cmd.building] || (unit_data[_name3] = {
          count: 0,
          p1_count: 0,
          p2_count: 0,
          w_count: 0,
          l_count: 0
        });
        unit_data[cmd.building].count++;
        if (cmd.owner === game.game.history[1].owner) {
          unit_data[cmd.building].p1_count++;
        } else {
          unit_data[cmd.building].p2_count++;
        }
        if (cmd.owner === game.game.result) {
          unit_data[cmd.building].w_count++;
        } else {
          unit_data[cmd.building].l_count++;
        }
      }
    }
    unit_data_per_game = JSON.parse(JSON.stringify(unit_data));
    games = 0;
    for (_p = 0, _len7 = data.length; _p < _len7; _p++) {
      game = data[_p];
      if (game.version === "0.0.17") {
        games++;
      }
    }
    for (unit in unit_data_per_game) {
      unit_data_per_game[unit].count /= games;
      unit_data_per_game[unit].p1_count /= games;
      unit_data_per_game[unit].p2_count /= games;
      unit_data_per_game[unit].w_count /= games;
      unit_data_per_game[unit].l_count /= games;
    }
    units_per_game = {};
    for (unit in unit_data_per_game) {
      udata = unit_data_per_game[unit];
      units_per_game[unit] = udata.count;
    }
    createChart(units_per_game, '#unitsBuiltPerGame', 1);
    for (unit in unit_data_per_game) {
      udata = unit_data_per_game[unit];
      units_per_game[unit] = udata.p1_count;
    }
    createChart(units_per_game, '#unitsP1BuiltPerGame', 1);
    for (unit in unit_data_per_game) {
      udata = unit_data_per_game[unit];
      units_per_game[unit] = udata.p2_count;
    }
    createChart(units_per_game, '#unitsP2BuiltPerGame', 1);
    for (unit in unit_data_per_game) {
      udata = unit_data_per_game[unit];
      units_per_game[unit] = udata.w_count;
    }
    createChart(units_per_game, '#unitsWBuiltPerGame', 1);
    for (unit in unit_data_per_game) {
      udata = unit_data_per_game[unit];
      units_per_game[unit] = udata.l_count;
    }
    return createChart(units_per_game, '#unitsLBuiltPerGame', 1);
  }).fail(function(xhr, textStatus, err) {
    return console.log(err);
  });

  createChart = function(data, selector, decimal_places) {
    var bar, barHeight, chart, key, labels, points, val, width, x;
    points = [];
    labels = [];
    for (key in data) {
      val = data[key];
      points.push(val);
      labels.push(key);
    }
    width = 420;
    barHeight = 20;
    x = d3.scale.linear().domain([0, d3.max(points)]).range([0, width]);
    chart = d3.select(selector).attr('width', width).attr('height', barHeight * points.length);
    bar = chart.selectAll('g').data(points).enter().append('g').attr('transform', function(d, i) {
      return "translate(0," + (i * barHeight) + ")";
    });
    bar.append('rect').attr('width', x).attr('height', barHeight - 1);
    return bar.append('text').attr('x', function(d) {
      return x(d) - 3;
    }).attr('y', barHeight / 2).attr('dy', '.35em').text(function(d, i) {
      return "" + labels[i] + ": " + (d.toFixed(decimal_places || 0));
    });
  };

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
